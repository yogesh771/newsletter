@model  NewLetter.Models.qendidateList

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>Personal Information</title>

    <!-- Bootstrap -->
    <link href="~/css/bootstrap.css" rel="stylesheet">
    <link href="~/css/style.css" rel="stylesheet">

    <link href="https://fonts.googleapis.com/css?family=Open+Sans|Roboto" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Oswald" rel="stylesheet">
    @*<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>*@

    <link href="~/Content/themes/base/jquery.ui.all.css" rel="stylesheet" />
    <script src="~/Scripts/jquery-3.1.1.js"></script>
    <script src="~/Scripts/jquery-1.10.2.js"></script>
    <script src="~/Scripts/jquery-ui-1.12.1.js"></script>
    <script src="~/js/bootstrap.min.js"></script>
    <script src="~/Scripts/jquery.validate.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.js"></script>





    <link rel="stylesheet" href="~/css/jquery.mCustomScrollbar.min.css">
    @*<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>*@
    <script src="~/js/jquery.mCustomScrollbar.concat.min.js"></script>
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyDGhqKFgJrrhrXFGFHRzuPJ84hK7GbtAno"></script>
    <script>
        (function ($) {
            $(window).load(function () {

                $("#content-1").mCustomScrollbar({
                    axis: "yx", //set both axis scrollbars
                    advanced: { autoExpandHorizontalScroll: true }, //auto-expand content to accommodate floated elements
                    // change mouse-wheel axis on-the-fly
                    callbacks: {
                        onOverflowY: function () {
                            var opt = $(this).data("mCS").opt;
                            if (opt.mouseWheel.axis !== "y") opt.mouseWheel.axis = "y";
                        },
                        onOverflowX: function () {
                            var opt = $(this).data("mCS").opt;
                            if (opt.mouseWheel.axis !== "x") opt.mouseWheel.axis = "x";
                        },
                    }
                });

            });
        })(jQuery);
    </script>

    <style>
        span.col_1.tleft.text-danger.field-validation-error :before {
            content: " Warning ! ";
            color: red;
            font-weight: bold;
        }

        .text-danger {
            color: red;
        }
    </style>

    <script type="text/javascript">
        $(document).ready(function () {
            $("form").submit(function (e) {
                debugger
                e.preventDefault();
                Upload();

            });
        });



        function Upload() {
            debugger
            //Get reference of FileUpload.
            var fileUpload = document.getElementById("photoA");

            if (fileUpload.files[0]) {
                //Check whether the file is valid Image.
                var regex = new RegExp("([a-zA-Z0-9\s_\\.\-:])+(.jpg|.png|.gif)$");
                if (regex.test(fileUpload.value.toLowerCase())) {

                    var reader = new FileReader();

                    reader.readAsDataURL(fileUpload.files[0]);
                    reader.onload = function (e) {

                        var image = new Image();


                        image.src = e.target.result;


                        image.onload = function () {
                            debugger
                            var height = this.height;
                            var width = this.width;
                            if (height > 100 || width > 100) {
                                debugger
                                alert("Height and Width must not exceed 100px.");
                                return false;
                            }
                            else {
                                $("form").unbind('submit').submit();
                            }
                        };

                    }
                }
                else {
                    alert("Please select .jpg,.png,.gif");
                    return false;
                }
            }
            else { $("form").unbind('submit').submit(); }
        }

    </script>
    <script type="text/javascript">
        var jqOld = jQuery.noConflict();
        jqOld(function () {
            jqOld("#txtdob").datepicker();
        })
    </script>

</head>
<body id="pd">
    <div class="container">
        <div class="row sub-container">
            <div class="col-md-6 col-sm-12 col-xs-12">
                <div class="top-logos">
                    <img src="~/images/qendidate-logo.png" />
                    <img src="~/images/orion-logo.png" />
                </div>
            </div>
            <div class="col-md-6 col-sm-12 col-xs-12">

                <div class="right-box">
                    @using (Html.BeginForm("SavePersonalInfo", "profiler", FormMethod.Post, new { id = "msform", enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()

                        <div class="form" id="content-1">

                            @Html.HiddenFor(m => m.qenID)
                            <h1>personal information</h1>
                            <div class="form-group">
                                @Html.TextBoxFor(m => m.qenName, new { id = "Name", placeholder = "Full Name", maxlength = "50" })
                                <div class="alert alert-warning error-custom" role="alert">
                                    @Html.ValidationMessageFor(model => model.qenName, "", new { @class = "col_1 tleft text-danger" })
                                </div>
                            </div>




                            <div class="form-group">
                                @Html.TextBoxFor(m => m.qenEmail, new { id = "email", placeholder = "Email", maxlength = "50" })
                                <div class="alert alert-warning error-custom" role="alert">
                                    @Html.ValidationMessageFor(model => model.qenEmail, "", new { @class = "col_1 tleft text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.TextBoxFor(m => m.qenPhone, new { id = "phone", placeholder = "Mobile Number", maxlength = "10" })
                                <div class="alert alert-warning error-custom" role="alert">
                                    @Html.ValidationMessageFor(model => model.qenPhone, "", new { @class = "col_1 tleft text-danger" })
                                </div>
                            </div>

                            <div class="form-group select-box">
                                @Html.DropDownList("genderID", null, htmlAttributes: new { @class = "form-control" })
                            </div>

                            <div class="form-group">
                                @Html.TextBoxFor(m => m.dob, "{0:d MMM yyyy}", new { id = "txtdob", placeholder = "date of birth", maxlength = "50" })
                                <div class="alert alert-warning error-custom" role="alert">
                                    @Html.ValidationMessageFor(model => model.dob, "", new { @class = "col_1 tleft text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.TextBoxFor(m => m.qenNationality, new { id = "txtnational", placeholder = "Nationality", maxlength = "50" })
                                <div class="alert alert-warning error-custom" role="alert">
                                    @Html.ValidationMessageFor(model => model.qenNationality, "", new { @class = "col_1 tleft text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.TextBoxFor(model => model.City, new { id = "locality", placeholder = "City" })<i class="glyphicon glyphicon-map-marker" data-toggle="tooltip" title="find current location" onclick="return codeLatLng();"></i>
                                <div class="alert alert-warning error-custom" role="alert">
                                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "col_1 tleft text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.TextBoxFor(model => model.streetNo, new { id = "street_number", placeholder = "street no", maxlength = "20" })
                                <div class="alert alert-warning error-custom" role="alert">
                                    @Html.ValidationMessageFor(model => model.streetNo, "", new { @class = "col_1 tleft text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.TextBoxFor(m => m.qenAddress, new { id = "route", placeholder = "Address", maxlength = "100" })
                                <div class="alert alert-warning error-custom" role="alert">
                                    @Html.ValidationMessageFor(model => model.qenAddress, "", new { @class = "col_1 tleft text-danger" })
                                </div>
                            </div>


                            <div class="form-group">
                                @Html.TextBoxFor(model => model.state, new { id = "administrative_area_level_1", placeholder = "state", maxlength = "100" })
                                <div class="alert alert-warning error-custom" role="alert">
                                    @Html.ValidationMessageFor(model => model.state, "", new { @class = "col_1 tleft text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.TextBoxFor(model => model.country, new { id = "country", placeholder = "country", maxlength = "100" })
                                <div class="alert alert-warning error-custom" role="alert">
                                    @Html.ValidationMessageFor(model => model.country, "", new { @class = "col_1 tleft text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.TextBoxFor(model => model.zipCode, new { id = "postal_code", placeholder = "postal code", maxlength = "6" })
                                <div class="alert alert-warning error-custom" role="alert">
                                    @Html.ValidationMessageFor(model => model.zipCode, "", new { @class = "col_1 tleft text-danger" })
                                </div>
                            </div>
                            @Html.HiddenFor(m => m.latitude)  @Html.HiddenFor(m => m.longitude)


                            <div class="form-group">
                                @Html.TextBoxFor(m => m.qenPassport, new { id = "txtpassport", placeholder = "Passport", maxlength = "20" })
                                <div class="alert alert-warning error-custom" role="alert">
                                    @Html.ValidationMessageFor(model => model.qenPassport, "", new { @class = "col_1 tleft text-danger" })
                                </div>
                            </div>



							<div class="col-md-12 padding-none">
								<div class="pull-left" style="width:90px;">
                                @{ if (Model.qenImage == "" || Model.qenImage == null)
                                    {
                                        <img id="pic" src='~/Logo/Emptyuser.jpg' alt="your image" style="width:100px; height:100px;"  />
                                    }
                                    else
                                    {
                                        <img id="pic" src='@Model.qenImage' alt="your image"  />
                                    }
                                }
								</div>
								<div class="pull-left padding-none" style="width:225px;"><input type="file" id="photoA" name="files"></div>


                            @*<img id='img-upload' />*@
                               </div>
							   




                        </div>
                            <div class="group next-btn-wrap">
                                <input type="submit" class="nxt-btn" name="Next" value="Next" />
                            </div>

                    }
                </div>
            </div>
            <div class="left-text">
                <p>Achieve your dream by jump starting with Qendidate</p>
            </div>
        </div>

    </div>



    <script>
      // This example displays an address form, using the autocomplete feature
      // of the Google Places API to help users fill in the information.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
        jQuery(document).ready(function () {
            initAutocomplete();
            initialize();
            $('[data-toggle="tooltip"]').tooltip();
        });
      var placeSearch, autocomplete;
      var componentForm = {
          street_number: 'long_name',
          route: 'long_name',
      locality: 'long_name',
      administrative_area_level_1: 'long_name',
      country: 'long_name',
      postal_code: 'short_name'
      };

      function initAutocomplete() {
          debugger
        // Create the autocomplete object, restricting the search to geographical
        // location types.
          autocomplete = new google.maps.places.Autocomplete((document.getElementById('locality')), { autocomplete: ['geocode'] });

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
      }

      function fillInAddress() {
          debugger
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        for (var component in componentForm) {
          document.getElementById(component).value = '';
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
            debugger
          var addressType = place.address_components[i].types[0];

          if (componentForm[addressType]) {
              debugger
            var val = place.address_components[i][componentForm[addressType]];
            document.getElementById(addressType).value = val;
            document.getElementById('latitude').value =place.geometry.viewport.b.b;
            document.getElementById('longitude').value =place.geometry.viewport.f.f;

          }
        }

      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
          debugger
          if (navigator.geolocation) {

          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            debugger

            autocomplete.setBounds(circle.getBounds());
          });
        }
      }
    </script>



    <script type="text/javascript">

        var geocoder;
        var lat, lng;
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(successFunction, errorFunction);
        }
        //Get the latitude and the longitude;
        function successFunction(position) {
             lat = position.coords.latitude;
             lng = position.coords.longitude;
           
        }

        function errorFunction() {
            alert("Geocoder failed");
        }

        function initialize() {
            geocoder = new google.maps.Geocoder();

        }


        function codeLatLng() {

            var latlng = new google.maps.LatLng(lat, lng);
            geocoder.geocode({ 'latLng': latlng }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {                   
                    if (results[1]) {
                        //formatted address                     

                        //====================================================
                        for (var component in componentForm) {
                            document.getElementById(component).value = '';
                        }

                        // Get each component of the address from the place details
                        // and fill the corresponding field on the form.
                        for (var i = 0; i < results[0].address_components.length; i++) {
                            debugger
                            var addressType = results[0].address_components[i].types[0];

                            if (componentForm[addressType]) {
                                debugger
                                var val = results[0].address_components[i][componentForm[addressType]];
                                document.getElementById(addressType).value = val; 
                            }
                        }
                        document.getElementById('latitude').value = results[0].geometry.viewport.b.b;
                        document.getElementById('longitude').value = results[0].geometry.viewport.f.f;
                        //====================================================

                    }
                    else {
                        alert("No results found");
                    }
                } else {
                    alert("Geocoder failed due to: " + status);
                }
            });
        }
    </script>


    <script>
        function readURL(input) {
            if (input.files && input.files[0]) {

                var reader = new FileReader();

                reader.onload = function (e) {
                    $('#pic').attr('src', e.target.result);
                }

                reader.readAsDataURL(input.files[0]);
            }
        }

        $("#photoA").change(function () {
            readURL(this);
        });
    </script>
    <script type="text/javascript">
        $(document).ready(function () {
            $("form").submit(function (e) {
                debugger
                e.preventDefault();
                Upload();

            });
        });



        function Upload() {
            debugger
                //Get reference of FileUpload.
                var fileUpload = document.getElementById("photoA");
                if (typeof (fileUpload.files[0]) != "undefined") {
                    //Check whether the file is valid Image.
                    var regex = new RegExp("([a-zA-Z0-9\s_\\.\-:])+(.jpg|.png|.gif)$");
                    if (regex.test(fileUpload.value.toLowerCase())) {
                        var reader = new FileReader();
                        reader.readAsDataURL(fileUpload.files[0]);
                        reader.onload = function (e) {
                            var image = new Image();
                            image.src = e.target.result;
                            image.onload = function () {
                                debugger
                                var height = this.height;
                                var width = this.width;
                                if (height > 100 || width > 100) {
                                    debugger
                                    alert("Height and Width must not exceed 100px.");
                                    return false;
                                }
                                else {
                                    $("form").unbind('submit').submit();
                                }
                            };

                        }
                    }
                    else {
                        alert("Please select .jpg,.png,.gif");
                        return false;
                    }
                }

                else {
                    $("form").unbind('submit').submit();
                }
            }

    </script>
</body>
</html>
